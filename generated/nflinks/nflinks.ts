// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CashoutRequested extends ethereum.Event {
  get params(): CashoutRequested__Params {
    return new CashoutRequested__Params(this);
  }
}

export class CashoutRequested__Params {
  _event: CashoutRequested;

  constructor(event: CashoutRequested) {
    this._event = event;
  }

  get chainId_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenAddress_(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get suggestedOwner_(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CashoutSettled extends ethereum.Event {
  get params(): CashoutSettled__Params {
    return new CashoutSettled__Params(this);
  }
}

export class CashoutSettled__Params {
  _event: CashoutSettled;

  constructor(event: CashoutSettled) {
    this._event = event;
  }

  get chainId_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenAddress_(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get suggestedOwner_(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount_(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DeLinked extends ethereum.Event {
  get params(): DeLinked__Params {
    return new DeLinked__Params(this);
  }
}

export class DeLinked__Params {
  _event: DeLinked;

  constructor(event: DeLinked) {
    this._event = event;
  }

  get linkId_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get subjectLinkerId_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get objectLinkerId_(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get subjectChainId_(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get subjectTokenAddress_(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get subjectTokenId_(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get objectChainId_(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get objectTokenAddress_(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get objectTokenId_(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class Linked extends ethereum.Event {
  get params(): Linked__Params {
    return new Linked__Params(this);
  }
}

export class Linked__Params {
  _event: Linked;

  constructor(event: Linked) {
    this._event = event;
  }

  get linkId_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get subjectLinkerId_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get objectLinkerId_(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get subjectChainId_(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get subjectTokenAddress_(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get subjectTokenId_(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get objectChainId_(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get objectTokenAddress_(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get objectTokenId_(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get weight(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class LinkerMinted extends ethereum.Event {
  get params(): LinkerMinted__Params {
    return new LinkerMinted__Params(this);
  }
}

export class LinkerMinted__Params {
  _event: LinkerMinted;

  constructor(event: LinkerMinted) {
    this._event = event;
  }

  get linkerId_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get chainId_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAddress_(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get mintPrice_(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get systemShare_(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get referrerShare_(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get referrer(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get tokenShare_(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReferralTokenMint extends ethereum.Event {
  get params(): ReferralTokenMint__Params {
    return new ReferralTokenMint__Params(this);
  }
}

export class ReferralTokenMint__Params {
  _event: ReferralTokenMint;

  constructor(event: ReferralTokenMint) {
    this._event = event;
  }

  get referrer_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UserRegistered extends ethereum.Event {
  get params(): UserRegistered__Params {
    return new UserRegistered__Params(this);
  }
}

export class UserRegistered__Params {
  _event: UserRegistered;

  constructor(event: UserRegistered) {
    this._event = event;
  }

  get user_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get referrer_(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class nflinks__calculateLinkIdInputSubject_Struct extends ethereum.Tuple {
  get chainId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }
}

export class nflinks__calculateLinkIdInputTarget_Struct extends ethereum.Tuple {
  get chainId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }
}

export class nflinks__calculateLinkerIdInputNft_Struct extends ethereum.Tuple {
  get chainId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }
}

export class nflinks__cashoutRequestsResult {
  value0: Bytes;
  value1: Address;

  constructor(value0: Bytes, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getAssertionId(): Bytes {
    return this.value0;
  }

  getSuggestedOwner(): Address {
    return this.value1;
  }
}

export class nflinks extends ethereum.SmartContract {
  static bind(address: Address): nflinks {
    return new nflinks("nflinks", address);
  }

  CALCULATION_DENOMINATOR(): BigInt {
    let result = super.call(
      "CALCULATION_DENOMINATOR",
      "CALCULATION_DENOMINATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_CALCULATION_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CALCULATION_DENOMINATOR",
      "CALCULATION_DENOMINATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_REFERRAL_SHARE_NUMERATOR(): BigInt {
    let result = super.call(
      "MAX_REFERRAL_SHARE_NUMERATOR",
      "MAX_REFERRAL_SHARE_NUMERATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_REFERRAL_SHARE_NUMERATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_REFERRAL_SHARE_NUMERATOR",
      "MAX_REFERRAL_SHARE_NUMERATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_SYSTEM_SHARE_NUMERATOR(): BigInt {
    let result = super.call(
      "MAX_SYSTEM_SHARE_NUMERATOR",
      "MAX_SYSTEM_SHARE_NUMERATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_SYSTEM_SHARE_NUMERATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_SYSTEM_SHARE_NUMERATOR",
      "MAX_SYSTEM_SHARE_NUMERATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableSeats(): BigInt {
    let result = super.call("availableSeats", "availableSeats():(uint256)", []);

    return result[0].toBigInt();
  }

  try_availableSeats(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableSeats",
      "availableSeats():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  calculateLinkId(
    subject_: nflinks__calculateLinkIdInputSubject_Struct,
    target_: nflinks__calculateLinkIdInputTarget_Struct
  ): BigInt {
    let result = super.call(
      "calculateLinkId",
      "calculateLinkId((uint256,address,uint256),(uint256,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(subject_), ethereum.Value.fromTuple(target_)]
    );

    return result[0].toBigInt();
  }

  try_calculateLinkId(
    subject_: nflinks__calculateLinkIdInputSubject_Struct,
    target_: nflinks__calculateLinkIdInputTarget_Struct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateLinkId",
      "calculateLinkId((uint256,address,uint256),(uint256,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(subject_), ethereum.Value.fromTuple(target_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateLinkerId(nft_: nflinks__calculateLinkerIdInputNft_Struct): BigInt {
    let result = super.call(
      "calculateLinkerId",
      "calculateLinkerId((uint256,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(nft_)]
    );

    return result[0].toBigInt();
  }

  try_calculateLinkerId(
    nft_: nflinks__calculateLinkerIdInputNft_Struct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateLinkerId",
      "calculateLinkerId((uint256,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(nft_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateReferralTokenId(referrer_: Address): BigInt {
    let result = super.call(
      "calculateReferralTokenId",
      "calculateReferralTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(referrer_)]
    );

    return result[0].toBigInt();
  }

  try_calculateReferralTokenId(
    referrer_: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateReferralTokenId",
      "calculateReferralTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(referrer_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cashoutRequests(param0: BigInt): nflinks__cashoutRequestsResult {
    let result = super.call(
      "cashoutRequests",
      "cashoutRequests(uint256):(bytes32,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new nflinks__cashoutRequestsResult(
      result[0].toBytes(),
      result[1].toAddress()
    );
  }

  try_cashoutRequests(
    param0: BigInt
  ): ethereum.CallResult<nflinks__cashoutRequestsResult> {
    let result = super.tryCall(
      "cashoutRequests",
      "cashoutRequests(uint256):(bytes32,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new nflinks__cashoutRequestsResult(
        value[0].toBytes(),
        value[1].toAddress()
      )
    );
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  figureMintPrice(linkerId_: BigInt): BigInt {
    let result = super.call(
      "figureMintPrice",
      "figureMintPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(linkerId_)]
    );

    return result[0].toBigInt();
  }

  try_figureMintPrice(linkerId_: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "figureMintPrice",
      "figureMintPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(linkerId_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  members(param0: Address): boolean {
    let result = super.call("members", "members(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_members(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("members", "members(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintPriceIncreaseNumerator(): BigInt {
    let result = super.call(
      "mintPriceIncreaseNumerator",
      "mintPriceIncreaseNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_mintPriceIncreaseNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintPriceIncreaseNumerator",
      "mintPriceIncreaseNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintPrices(param0: BigInt): BigInt {
    let result = super.call("mintPrices", "mintPrices(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_mintPrices(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintPrices", "mintPrices(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  oov3(): Address {
    let result = super.call("oov3", "oov3():(address)", []);

    return result[0].toAddress();
  }

  try_oov3(): ethereum.CallResult<Address> {
    let result = super.tryCall("oov3", "oov3():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  referralBalances(param0: Address): BigInt {
    let result = super.call(
      "referralBalances",
      "referralBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_referralBalances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referralBalances",
      "referralBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referralShareNumerator(): BigInt {
    let result = super.call(
      "referralShareNumerator",
      "referralShareNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_referralShareNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referralShareNumerator",
      "referralShareNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referrers(param0: Address): Address {
    let result = super.call("referrers", "referrers(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_referrers(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("referrers", "referrers(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setNextMintPrice(): BigInt {
    let result = super.call(
      "setNextMintPrice",
      "setNextMintPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_setNextMintPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setNextMintPrice",
      "setNextMintPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  systemBalance(): BigInt {
    let result = super.call("systemBalance", "systemBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_systemBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "systemBalance",
      "systemBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  systemShareNumerator(): BigInt {
    let result = super.call(
      "systemShareNumerator",
      "systemShareNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_systemShareNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "systemShareNumerator",
      "systemShareNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenBalances(param0: BigInt): BigInt {
    let result = super.call(
      "tokenBalances",
      "tokenBalances(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_tokenBalances(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenBalances",
      "tokenBalances(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply1(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply1(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(param0: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uri(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialOwner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get initialSeats_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get initialPrice_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get priceIncreaseNumerator_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get umaV3_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DelinkCall extends ethereum.Call {
  get inputs(): DelinkCall__Inputs {
    return new DelinkCall__Inputs(this);
  }

  get outputs(): DelinkCall__Outputs {
    return new DelinkCall__Outputs(this);
  }
}

export class DelinkCall__Inputs {
  _call: DelinkCall;

  constructor(call: DelinkCall) {
    this._call = call;
  }

  get subject_(): DelinkCallSubject_Struct {
    return changetype<DelinkCallSubject_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get target_(): DelinkCallTarget_Struct {
    return changetype<DelinkCallTarget_Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get weight_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DelinkCall__Outputs {
  _call: DelinkCall;

  constructor(call: DelinkCall) {
    this._call = call;
  }
}

export class DelinkCallSubject_Struct extends ethereum.Tuple {
  get chainId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }
}

export class DelinkCallTarget_Struct extends ethereum.Tuple {
  get chainId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }
}

export class FigureMintPriceCall extends ethereum.Call {
  get inputs(): FigureMintPriceCall__Inputs {
    return new FigureMintPriceCall__Inputs(this);
  }

  get outputs(): FigureMintPriceCall__Outputs {
    return new FigureMintPriceCall__Outputs(this);
  }
}

export class FigureMintPriceCall__Inputs {
  _call: FigureMintPriceCall;

  constructor(call: FigureMintPriceCall) {
    this._call = call;
  }

  get linkerId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FigureMintPriceCall__Outputs {
  _call: FigureMintPriceCall;

  constructor(call: FigureMintPriceCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LinkCall extends ethereum.Call {
  get inputs(): LinkCall__Inputs {
    return new LinkCall__Inputs(this);
  }

  get outputs(): LinkCall__Outputs {
    return new LinkCall__Outputs(this);
  }
}

export class LinkCall__Inputs {
  _call: LinkCall;

  constructor(call: LinkCall) {
    this._call = call;
  }

  get subject_(): LinkCallSubject_Struct {
    return changetype<LinkCallSubject_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get target_(): LinkCallTarget_Struct {
    return changetype<LinkCallTarget_Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get weight_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LinkCall__Outputs {
  _call: LinkCall;

  constructor(call: LinkCall) {
    this._call = call;
  }
}

export class LinkCallSubject_Struct extends ethereum.Tuple {
  get chainId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }
}

export class LinkCallTarget_Struct extends ethereum.Tuple {
  get chainId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get target_(): MintCallTarget_Struct {
    return changetype<MintCallTarget_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCallTarget_Struct extends ethereum.Tuple {
  get chainId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get referrer_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get consumer_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class RegisterAndMintCall extends ethereum.Call {
  get inputs(): RegisterAndMintCall__Inputs {
    return new RegisterAndMintCall__Inputs(this);
  }

  get outputs(): RegisterAndMintCall__Outputs {
    return new RegisterAndMintCall__Outputs(this);
  }
}

export class RegisterAndMintCall__Inputs {
  _call: RegisterAndMintCall;

  constructor(call: RegisterAndMintCall) {
    this._call = call;
  }

  get target_(): RegisterAndMintCallTarget_Struct {
    return changetype<RegisterAndMintCallTarget_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get to_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get referrer_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RegisterAndMintCall__Outputs {
  _call: RegisterAndMintCall;

  constructor(call: RegisterAndMintCall) {
    this._call = call;
  }
}

export class RegisterAndMintCallTarget_Struct extends ethereum.Tuple {
  get chainId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }
}

export class RegisterWithSignatureCall extends ethereum.Call {
  get inputs(): RegisterWithSignatureCall__Inputs {
    return new RegisterWithSignatureCall__Inputs(this);
  }

  get outputs(): RegisterWithSignatureCall__Outputs {
    return new RegisterWithSignatureCall__Outputs(this);
  }
}

export class RegisterWithSignatureCall__Inputs {
  _call: RegisterWithSignatureCall;

  constructor(call: RegisterWithSignatureCall) {
    this._call = call;
  }

  get referrer_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get consumer_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get signature_(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RegisterWithSignatureCall__Outputs {
  _call: RegisterWithSignatureCall;

  constructor(call: RegisterWithSignatureCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestCashoutCall extends ethereum.Call {
  get inputs(): RequestCashoutCall__Inputs {
    return new RequestCashoutCall__Inputs(this);
  }

  get outputs(): RequestCashoutCall__Outputs {
    return new RequestCashoutCall__Outputs(this);
  }
}

export class RequestCashoutCall__Inputs {
  _call: RequestCashoutCall;

  constructor(call: RequestCashoutCall) {
    this._call = call;
  }

  get nft_(): RequestCashoutCallNft_Struct {
    return changetype<RequestCashoutCallNft_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get suggestedOwner_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RequestCashoutCall__Outputs {
  _call: RequestCashoutCall;

  constructor(call: RequestCashoutCall) {
    this._call = call;
  }
}

export class RequestCashoutCallNft_Struct extends ethereum.Tuple {
  get chainId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetNextMintPriceCall extends ethereum.Call {
  get inputs(): SetNextMintPriceCall__Inputs {
    return new SetNextMintPriceCall__Inputs(this);
  }

  get outputs(): SetNextMintPriceCall__Outputs {
    return new SetNextMintPriceCall__Outputs(this);
  }
}

export class SetNextMintPriceCall__Inputs {
  _call: SetNextMintPriceCall;

  constructor(call: SetNextMintPriceCall) {
    this._call = call;
  }
}

export class SetNextMintPriceCall__Outputs {
  _call: SetNextMintPriceCall;

  constructor(call: SetNextMintPriceCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SettleCashoutCall extends ethereum.Call {
  get inputs(): SettleCashoutCall__Inputs {
    return new SettleCashoutCall__Inputs(this);
  }

  get outputs(): SettleCashoutCall__Outputs {
    return new SettleCashoutCall__Outputs(this);
  }
}

export class SettleCashoutCall__Inputs {
  _call: SettleCashoutCall;

  constructor(call: SettleCashoutCall) {
    this._call = call;
  }

  get nft_(): SettleCashoutCallNft_Struct {
    return changetype<SettleCashoutCallNft_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SettleCashoutCall__Outputs {
  _call: SettleCashoutCall;

  constructor(call: SettleCashoutCall) {
    this._call = call;
  }
}

export class SettleCashoutCallNft_Struct extends ethereum.Tuple {
  get chainId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
